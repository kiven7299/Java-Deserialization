package com.servlets;

import org.apache.commons.fileupload.disk.DiskFileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.List;


public class FileUploadAndDeserializeServlet extends HttpServlet {

    private final String MESSAGE_PAGE = "/upload_status.jsp";

    // location to store file uploaded
    private static final String UPLOAD_DIRECTORY = "WEB-INF\\uploads";

    // upload settings
    private static final int MEMORY_THRESHOLD   = 1024 * 1024 * 3;  // 3MB
    private static final int MAX_FILE_SIZE      = 1024 * 1024 * 40; // 40MB
    private static final int MAX_REQUEST_SIZE   = 1024 * 1024 * 50; // 50MB

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {



        // checks if the request actually contains upload file
        if (!ServletFileUpload.isMultipartContent(request)) {
            // if not, we stop here
            request.setAttribute("message",
                    "Error: Form must has enctype=multipart/form-data.");

        } else {
            // configures upload settings
            DiskFileItemFactory factory = new DiskFileItemFactory();
            ServletFileUpload upload = new ServletFileUpload(factory);

            String uploadPath = getServletContext().getRealPath("")
                    + File.separator + UPLOAD_DIRECTORY;

            // creates the directory if it does not exist
            File uploadDir = new File(uploadPath);
            if (!uploadDir.exists()) {
                uploadDir.mkdirs();
            }

            try {
                // parses the request's content to extract file data
                @SuppressWarnings("unchecked")
                List<DiskFileItem> formItems = upload.parseRequest(request);

                if (formItems != null && formItems.size() > 0) {
                    // iterates over form's fields
                    for (DiskFileItem item : formItems) {
                        // processes only fields that are not form fields
                        if (!item.isFormField()) {
                            String fileName = new File(item.getName()).getName();
                            String filePath = uploadPath
                                    + File.separator + fileName;
                            File storeFile = new File(filePath); //create file to be saved

//                            // saves the file onto disk
                            item.write(storeFile);

                            //Deserialize file's data
                            deserializeFileContent(storeFile, request);
                        }
                    }
                }
            } catch (Exception ex) {
                request.setAttribute("message",
                        "There was an error: " + ex.getMessage());
            }

        }

        // forward to message page
        getServletContext().getRequestDispatcher(MESSAGE_PAGE).forward(
                request, response);

    }

    public boolean deserializeFileContent(File file, HttpServletRequest request) { //Deserialize data in uploaded file
        Studentinfo stu = null;
        try {
            FileInputStream fileInputStream = new FileInputStream(file);
            ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
//            stu = (Studentinfo) objectInputStream.readObject();
            objectInputStream.readObject();
            objectInputStream.close();
            fileInputStream.close();

            String deserialization = "Class: " + stu.toString();
            request.setAttribute("message", "Successfully deserialize! " + deserialization);
        } catch (IOException i) {
            request.setAttribute("message",
                    "Error: " + i.getMessage());
            return false;
        } catch (ClassNotFoundException c) {
            request.setAttribute("message",
                    "Error: " + c.getMessage());
            return false;
        }
        return true;
    }


    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}
